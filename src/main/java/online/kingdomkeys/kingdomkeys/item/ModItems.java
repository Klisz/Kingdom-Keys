package online.kingdomkeys.kingdomkeys.item;

import net.minecraft.inventory.EquipmentSlotType;
import net.minecraft.item.Food;
import net.minecraft.item.Item;
import net.minecraft.item.Items;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import online.kingdomkeys.kingdomkeys.KingdomKeys;
import online.kingdomkeys.kingdomkeys.client.sound.ModSounds;
import online.kingdomkeys.kingdomkeys.lib.Strings;
import online.kingdomkeys.kingdomkeys.synthesis.material.SynthesisItem;

import java.util.function.Supplier;

public class ModItems {

	public static final DeferredRegister<Item> ITEMS = new DeferredRegister<>(ForgeRegistries.ITEMS, KingdomKeys.MODID);

    //Organization
    public static Item malice, sanction, overlord, veneration, autocracy, conquest, terminus, judgement, discipline, aristocracy, superiority, aggression, fury, despair, triumph, ruination, domination, annihilation, tyrant, magnificence, infinity, interdiction, roundFan, absolute, standalone, killerbee, stingray, counterweight, precision, dualHead, bahamut, gullwing, blueFrame, starShell, sunrise, ignition, armstrong, hardBoiledHeat, diabloEye, doubleTap, stardust, energyMuzzle, crimeAndPunishment, cupidsArrow, finalWeapon, sharpshooter, dryer, trumpet, zephyr, moonglade, aer, nescience, brume, asura, crux, paladin, fellking, nightcloud, shimmer, vortex, scission, heavenfall, aether, mazzaroth, hegemon, foxfire, yaksha, cynosura, dragonreign, lindworm, broom, wyvern, testerZero, productOne, deepFreeze, cryoliteShield, falseTheory, glacier, absoluteZero, gunz, mindel, snowslide, iceberg, inquisition, scrutiny, empiricism, edification, contrivance, wurm, subzero, coldBlood, diamondShield, aegis, frozenPride, potLid, snowman, reticence, goliath, copperRed, daybreak, colossus, ursaMajor, megacosm, terrene, fuligin, hardWinter, firefly, harbinger, redwood, sequoia, ironBlack, earthshine, octiron, hyperion, clarity, oneThousandAndOneNights, cardinalVirtue, skysplitter, bleepBloopBop, monolith, blackPrimer, whiteTome, illicitResearch, buriedSecrets, arcaneCompendium, dissentersNotes, nefariousCodex, mysticAlbum, cursedManual, tabooText, eldritchEsoterica, freakishBestiary, madmansVita, untitledWritings, abandonedDogma, atlasOfOmens, revoltingScrapbook, lostHeterodoxy, otherworldlyTales, indescribableLore, radicalTreatise, bookOfRetribution, midnightSnack, dearDiary, newMoon, werewolf, artemis, luminary, selene, moonrise, astrologia, crater, lunarPhase, crescent, gibbous, berserker, twilight, queenOfTheNight, balsamicMoon, orbit, lightYear, kingOfTheNight, moonset, horoscope, dichotomy, lunatic, justDesserts, bunnymoon, ashes, doldrums, delayedAction, diveBombers, combustion, moulinRouge, blazeOfGlory, prometheus, ifrit, magmaOcean, volcanics, inferno, sizzlingEdge, corona, ferrisWheel, burnout, omegaTrinity, outbreak, doubleEdge, wildfire, prominence, eternalFlames, pizzaCut, conformers, basicModel, tuneUp, quartet, quintet, overture, oldHand, daCapo, powerChord, fermata, interlude, serenade, songbird, riseToFame, rockStar, eightFinger, concerto, harmonics, millionBucks, fortissimo, upToEleven, sanctuary, arpeggio, princeOfAwesome, afterSchool, theFool, theMagician, theStar, theMoon, justice, theHierophant, theWorld, temperance, theHighPriestess, theTower, theHangedMan, death, theHermit, strength, theLovers, theChariot, theSun, theDevil, theEmpress, theEmperor, theJoker, fairGame, finestFantasy13, highRollersSecret, fickleErica, jiltedAnemone, proudAmaryllis, madSafflower, poorMelissa, tragicAllium, mournfulCineria, pseudoSilene, faithlessDigitalis, grimMuscari, docileVallota, quietBelladonna, partingIpheion, loftyGerbera, gallantAchillea, noblePeony, fearsomeAnise, vindictiveThistle, fairHelianthus, solemnMagnolia, hallowedLotus, gracefulDahlia, stirringLadle, daintyBellflowers, trancheuse, orage, tourbillon, tempete, carmin, meteore, etoile, irregulier, dissonance, eruption, soleilCouchant, indigo, vague, deluge, rafale, typhon, extirpeur, croixDuSud, lumineuse, clairDeLune, volDeNuit, foudre, demoiselle, ampoule;
    //Keyblades
    public static final RegistryObject<Item>
			abaddonPlasma = createKeybladeItem(Strings.abaddonPlasma),
			abyssalTide = createKeybladeItem(Strings.abyssalTide),
			acedsKeyblade = createKeybladeItem(Strings.acedsKeyblade),
			allForOne = createKeybladeItem(Strings.allForOne),
			astralBlast = createKeybladeItem(Strings.astralBlast),
			aubade = createKeybladeItem(Strings.aubade),
			avasKeyblade = createKeybladeItem(Strings.avasKeyblade),
			bondOfFlame = createKeybladeItem(Strings.bondOfFlame),
			brightcrest = createKeybladeItem(Strings.brightcrest),
			chaosRipper = createKeybladeItem(Strings.chaosRipper),
			circleOfLife = createKeybladeItem(Strings.circleOfLife),
			counterpoint = createKeybladeItem(Strings.counterpoint),
			crabclaw = createKeybladeItem(Strings.crabclaw),
			crownOfGuilt = createKeybladeItem(Strings.crownOfGuilt),
			darkerThanDark = createKeybladeItem(Strings.darkerThanDark),
			darkgnaw = createKeybladeItem(Strings.darkgnaw),
			decisivePumpkin = createKeybladeItem(Strings.decisivePumpkin),
			destinysEmbrace = createKeybladeItem(Strings.destinysEmbrace),
			diamondDust = createKeybladeItem(Strings.diamondDust),
			divewing = createKeybladeItem(Strings.divewing),
			divineRose = createKeybladeItem(Strings.divineRose),
			dualDisc = createKeybladeItem(Strings.dualDisc),
			earthshaker = createKeybladeItem(Strings.earthshaker),
			endOfPain = createKeybladeItem(Strings.endOfPain),
			endsOfTheEarth = createKeybladeItem(Strings.endsOfTheEarth),
			fairyHarp = createKeybladeItem(Strings.fairyHarp),
			fairyStars = createKeybladeItem(Strings.fairyStars),
			fatalCrest = createKeybladeItem(Strings.fatalCrest),
			fenrir = createKeybladeItem(Strings.fenrir),
			ferrisGear = createKeybladeItem(Strings.ferrisGear),
			flameLiberator = createKeybladeItem(Strings.flameLiberator),
			followtheWind = createKeybladeItem(Strings.followtheWind),
			frolicFlame = createKeybladeItem(Strings.frolicFlame),
			glimpseOfDarkness = createKeybladeItem(Strings.glimpseOfDarkness),
			guardianBell = createKeybladeItem(Strings.guardianBell),
			guardianSoul = createKeybladeItem(Strings.guardianSoul),
			gulasKeyblade = createKeybladeItem(Strings.gulasKeyblade),
			gullWing = createKeybladeItem(Strings.gullWing),
			herosCrest = createKeybladeItem(Strings.herosCrest),
			hiddenDragon = createKeybladeItem(Strings.hiddenDragon),
			hyperdrive = createKeybladeItem(Strings.hyperdrive),
			incompleteKiblade = createKeybladeItem(Strings.incompleteKiblade),
			invisKeyblade = createKeybladeItem(Strings.invisKeyblade),
			irasKeyblade = createKeybladeItem(Strings.irasKeyblade),
			jungleKing = createKeybladeItem(Strings.jungleKing),
			keybladeOfPeoplesHearts = createKeybladeItem(Strings.keybladeOfPeoplesHearts),
			kiblade = createKeybladeItem(Strings.kiblade),
			kingdomKey = createKeybladeItem(Strings.kingdomKey),
			kingdomKeyD = createKeybladeItem(Strings.kingdomKeyD),
			knockoutPunch = createKeybladeItem(Strings.knockoutPunch),
			ladyLuck = createKeybladeItem(Strings.ladyLuck),
			leviathan = createKeybladeItem(Strings.leviathan),
			lionheart = createKeybladeItem(Strings.lionheart),
			lostMemory = createKeybladeItem(Strings.lostMemory),
			lunarEclipse = createKeybladeItem(Strings.lunarEclipse),
			markOfAHero = createKeybladeItem(Strings.markOfAHero),
			mastersDefender = createKeybladeItem(Strings.mastersDefender),
			maverickFlare = createKeybladeItem(Strings.maverickFlare),
			metalChocobo = createKeybladeItem(Strings.metalChocobo),
			midnightRoar = createKeybladeItem(Strings.midnightRoar),
			mirageSplit = createKeybladeItem(Strings.mirageSplit),
			missingAche = createKeybladeItem(Strings.missingAche),
			monochrome = createKeybladeItem(Strings.monochrome),
			moogleOGlory = createKeybladeItem(Strings.moogleOGlory),
			mysteriousAbyss = createKeybladeItem(Strings.mysteriousAbyss),
			nightmaresEnd = createKeybladeItem(Strings.nightmaresEnd),
			nightmaresEndAndMirageSplit = createKeybladeItem(Strings.nightmaresEndAndMirageSplit),
			noName = createKeybladeItem(Strings.noName),
			noNameBBS = createKeybladeItem(Strings.noNameBBS),
			oathkeeper = createKeybladeItem(Strings.oathkeeper),
			oblivion = createKeybladeItem(Strings.oblivion),
			oceansRage = createKeybladeItem(Strings.oceansRage),
			olympia = createKeybladeItem(Strings.olympia),
			omegaWeapon = createKeybladeItem(Strings.omegaWeapon),
			ominousBlight = createKeybladeItem(Strings.ominousBlight),
			oneWingedAngel = createKeybladeItem(Strings.oneWingedAngel),
			painOfSolitude = createKeybladeItem(Strings.painOfSolitude),
			photonDebugger = createKeybladeItem(Strings.photonDebugger),
			pixiePetal = createKeybladeItem(Strings.pixiePetal),
			pumpkinhead = createKeybladeItem(Strings.pumpkinhead),
			rainfell = createKeybladeItem(Strings.rainfell),
			rejectionOfFate = createKeybladeItem(Strings.rejectionOfFate),
			royalRadiance = createKeybladeItem(Strings.royalRadiance),
			rumblingRose = createKeybladeItem(Strings.rumblingRose),
			shootingStar = createKeybladeItem(Strings.shootingStar),
			signOfInnocence = createKeybladeItem(Strings.signOfInnocence),
			silentDirge = createKeybladeItem(Strings.silentDirge),
			skullNoise = createKeybladeItem(Strings.skullNoise),
			sleepingLion = createKeybladeItem(Strings.sleepingLion),
			soulEater = createKeybladeItem(Strings.soulEater),
			spellbinder = createKeybladeItem(Strings.spellbinder),
			starSeeker = createKeybladeItem(Strings.starSeeker),
			starlight = createKeybladeItem(Strings.starlight),
			stormfall = createKeybladeItem(Strings.stormfall),
			strokeOfMidnight = createKeybladeItem(Strings.strokeOfMidnight),
			sweetDreams = createKeybladeItem(Strings.sweetDreams),
			sweetMemories = createKeybladeItem(Strings.sweetMemories),
			sweetstack = createKeybladeItem(Strings.sweetstack),
			threeWishes = createKeybladeItem(Strings.threeWishes),
			totalEclipse = createKeybladeItem(Strings.totalEclipse),
			treasureTrove = createKeybladeItem(Strings.treasureTrove),
			trueLightsFlight = createKeybladeItem(Strings.trueLightsFlight),
			twilightBlaze = createKeybladeItem(Strings.twilightBlaze),
			twoBecomeOne = createKeybladeItem(Strings.twoBecomeOne),
			ultimaWeaponBBS = createKeybladeItem(Strings.ultimaWeaponBBS),
			ultimaWeaponDDD = createKeybladeItem(Strings.ultimaWeaponDDD),
			ultimaWeaponKH1 = createKeybladeItem(Strings.ultimaWeaponKH1),
			ultimaWeaponKH2 = createKeybladeItem(Strings.ultimaWeaponKH2),
			ultimaWeaponKH3 = createKeybladeItem(Strings.ultimaWeaponKH3),
			umbrella = createKeybladeItem(Strings.umbrella),
			unbound = createKeybladeItem(Strings.unbound),
			victoryLine = createKeybladeItem(Strings.victoryLine),
			voidGear = createKeybladeItem(Strings.voidGear),
			waytotheDawn = createKeybladeItem(Strings.waytotheDawn),
			waywardWind = createKeybladeItem(Strings.waywardWind),
			winnersProof = createKeybladeItem(Strings.winnersProof),
			wishingLamp = createKeybladeItem(Strings.wishingLamp),
			wishingStar = createKeybladeItem(Strings.wishingStar),
			woodenKeyblade = createKeybladeItem(Strings.woodenKeyblade),
			woodenStick = createKeybladeItem(Strings.woodenStick),
			youngXehanortsKeyblade = createKeybladeItem(Strings.youngXehanortsKeyblade),
			zeroOne = createKeybladeItem(Strings.zeroOne),

			abaddonPlasmaChain = createNewItem(Strings.abaddonPlasmaChain, KeychainItem::new),
			abyssalTideChain = createNewItem(Strings.abyssalTideChain, KeychainItem::new),
			acedsKeybladeChain = createNewItem(Strings.acedsKeybladeChain, KeychainItem::new),
			allForOneChain = createNewItem(Strings.allForOneChain, KeychainItem::new),
			astralBlastChain = createNewItem(Strings.astralBlastChain, KeychainItem::new),
			aubadeChain = createNewItem(Strings.aubadeChain, KeychainItem::new),
			avasKeybladeChain = createNewItem(Strings.avasKeybladeChain, KeychainItem::new),
			bondOfFlameChain = createNewItem(Strings.bondOfFlameChain, KeychainItem::new),
			brightcrestChain = createNewItem(Strings.brightcrestChain, KeychainItem::new),
			chaosRipperChain = createNewItem(Strings.chaosRipperChain, KeychainItem::new),
			circleOfLifeChain = createNewItem(Strings.circleOfLifeChain, KeychainItem::new),
			counterpointChain = createNewItem(Strings.counterpointChain, KeychainItem::new),
			crabclawChain = createNewItem(Strings.crabclawChain, KeychainItem::new),
			crownOfGuiltChain = createNewItem(Strings.crownOfGuiltChain, KeychainItem::new),
			darkerThanDarkChain = createNewItem(Strings.darkerThanDarkChain, KeychainItem::new),
			darkgnawChain = createNewItem(Strings.darkgnawChain, KeychainItem::new),
			decisivePumpkinChain = createNewItem(Strings.decisivePumpkinChain, KeychainItem::new),
			destinysEmbraceChain = createNewItem(Strings.destinysEmbraceChain, KeychainItem::new),
			diamondDustChain = createNewItem(Strings.diamondDustChain, KeychainItem::new),
			divewingChain = createNewItem(Strings.divewingChain, KeychainItem::new),
			divineRoseChain = createNewItem(Strings.divineRoseChain, KeychainItem::new),
			dualDiscChain = createNewItem(Strings.dualDiscChain, KeychainItem::new),
			earthshakerChain = createNewItem(Strings.earthshakerChain, KeychainItem::new),
			endOfPainChain = createNewItem(Strings.endOfPainChain, KeychainItem::new),
			endsOfTheEarthChain = createNewItem(Strings.endsOfTheEarthChain, KeychainItem::new),
			fairyHarpChain = createNewItem(Strings.fairyHarpChain, KeychainItem::new),
			fairyStarsChain = createNewItem(Strings.fairyStarsChain, KeychainItem::new),
			fatalCrestChain = createNewItem(Strings.fatalCrestChain, KeychainItem::new),
			fenrirChain = createNewItem(Strings.fenrirChain, KeychainItem::new),
			ferrisGearChain = createNewItem(Strings.ferrisGearChain, KeychainItem::new),
			flameLiberatorChain = createNewItem(Strings.flameLiberatorChain, KeychainItem::new),
			followtheWindChain = createNewItem(Strings.followtheWindChain, KeychainItem::new),
			frolicFlameChain = createNewItem(Strings.frolicFlameChain, KeychainItem::new),
			glimpseOfDarknessChain = createNewItem(Strings.glimpseOfDarknessChain, KeychainItem::new),
			guardianBellChain = createNewItem(Strings.guardianBellChain, KeychainItem::new),
			guardianSoulChain = createNewItem(Strings.guardianSoulChain, KeychainItem::new),
			gulasKeybladeChain = createNewItem(Strings.gulasKeybladeChain, KeychainItem::new),
			gullWingChain = createNewItem(Strings.gullWingChain, KeychainItem::new),
			herosCrestChain = createNewItem(Strings.herosCrestChain, KeychainItem::new),
			hiddenDragonChain = createNewItem(Strings.hiddenDragonChain, KeychainItem::new),
			hyperdriveChain = createNewItem(Strings.hyperdriveChain, KeychainItem::new),
			incompleteKibladeChain = createNewItem(Strings.incompleteKibladeChain, KeychainItem::new),
			invisKeybladeChain = createNewItem(Strings.invisKeybladeChain, KeychainItem::new),
			irasKeybladeChain = createNewItem(Strings.irasKeybladeChain, KeychainItem::new),
			jungleKingChain = createNewItem(Strings.jungleKingChain, KeychainItem::new),
			keybladeOfPeoplesHeartsChain = createNewItem(Strings.keybladeOfPeoplesHeartsChain, KeychainItem::new),
			kibladeChain = createNewItem(Strings.kibladeChain, KeychainItem::new),
			kingdomKeyChain = createNewItem(Strings.kingdomKeyChain, KeychainItem::new),
			kingdomKeyDChain = createNewItem(Strings.kingdomKeyDChain, KeychainItem::new),
			knockoutPunchChain = createNewItem(Strings.knockoutPunchChain, KeychainItem::new),
			ladyLuckChain = createNewItem(Strings.ladyLuckChain, KeychainItem::new),
			leviathanChain = createNewItem(Strings.leviathanChain, KeychainItem::new),
			lionheartChain = createNewItem(Strings.lionheartChain, KeychainItem::new),
			lostMemoryChain = createNewItem(Strings.lostMemoryChain, KeychainItem::new),
			lunarEclipseChain = createNewItem(Strings.lunarEclipseChain, KeychainItem::new),
			markOfAHeroChain = createNewItem(Strings.markOfAHeroChain, KeychainItem::new),
			mastersDefenderChain = createNewItem(Strings.mastersDefenderChain, KeychainItem::new),
			maverickFlareChain = createNewItem(Strings.maverickFlareChain, KeychainItem::new),
			metalChocoboChain = createNewItem(Strings.metalChocoboChain, KeychainItem::new),
			midnightRoarChain = createNewItem(Strings.midnightRoarChain, KeychainItem::new),
			mirageSplitChain = createNewItem(Strings.mirageSplitChain, KeychainItem::new),
			missingAcheChain = createNewItem(Strings.missingAcheChain, KeychainItem::new),
			monochromeChain = createNewItem(Strings.monochromeChain, KeychainItem::new),
			moogleOGloryChain = createNewItem(Strings.moogleOGloryChain, KeychainItem::new),
			mysteriousAbyssChain = createNewItem(Strings.mysteriousAbyssChain, KeychainItem::new),
			nightmaresEndChain = createNewItem(Strings.nightmaresEndChain, KeychainItem::new),
			nightmaresEndAndMirageSplitChain = createNewItem(Strings.nightmaresEndAndMirageSplitChain, KeychainItem::new),
			noNameChain = createNewItem(Strings.noNameChain, KeychainItem::new),
			noNameBBSChain = createNewItem(Strings.noNameBBSChain, KeychainItem::new),
			oathkeeperChain = createNewItem(Strings.oathkeeperChain, KeychainItem::new),
			oblivionChain = createNewItem(Strings.oblivionChain, KeychainItem::new),
			oceansRageChain = createNewItem(Strings.oceansRageChain, KeychainItem::new),
			olympiaChain = createNewItem(Strings.olympiaChain, KeychainItem::new),
			omegaWeaponChain = createNewItem(Strings.omegaWeaponChain, KeychainItem::new),
			ominousBlightChain = createNewItem(Strings.ominousBlightChain, KeychainItem::new),
			oneWingedAngelChain = createNewItem(Strings.oneWingedAngelChain, KeychainItem::new),
			painOfSolitudeChain = createNewItem(Strings.painOfSolitudeChain, KeychainItem::new),
			photonDebuggerChain = createNewItem(Strings.photonDebuggerChain, KeychainItem::new),
			pixiePetalChain = createNewItem(Strings.pixiePetalChain, KeychainItem::new),
			pumpkinheadChain = createNewItem(Strings.pumpkinheadChain, KeychainItem::new),
			rainfellChain = createNewItem(Strings.rainfellChain, KeychainItem::new),
			rejectionOfFateChain = createNewItem(Strings.rejectionOfFateChain, KeychainItem::new),
			royalRadianceChain = createNewItem(Strings.royalRadianceChain, KeychainItem::new),
			rumblingRoseChain = createNewItem(Strings.rumblingRoseChain, KeychainItem::new),
			shootingStarChain = createNewItem(Strings.shootingStarChain, KeychainItem::new),
			signOfInnocenceChain = createNewItem(Strings.signOfInnocenceChain, KeychainItem::new),
			silentDirgeChain = createNewItem(Strings.silentDirgeChain, KeychainItem::new),
			skullNoiseChain = createNewItem(Strings.skullNoiseChain, KeychainItem::new),
			sleepingLionChain = createNewItem(Strings.sleepingLionChain, KeychainItem::new),
			soulEaterChain = createNewItem(Strings.soulEaterChain, KeychainItem::new),
			spellbinderChain = createNewItem(Strings.spellbinderChain, KeychainItem::new),
			starSeekerChain = createNewItem(Strings.starSeekerChain, KeychainItem::new),
			starlightChain = createNewItem(Strings.starlightChain, KeychainItem::new),
			stormfallChain = createNewItem(Strings.stormfallChain, KeychainItem::new),
			strokeOfMidnightChain = createNewItem(Strings.strokeOfMidnightChain, KeychainItem::new),
			sweetDreamsChain = createNewItem(Strings.sweetDreamsChain, KeychainItem::new),
			sweetMemoriesChain = createNewItem(Strings.sweetMemoriesChain, KeychainItem::new),
			sweetstackChain = createNewItem(Strings.sweetstackChain, KeychainItem::new),
			threeWishesChain = createNewItem(Strings.threeWishesChain, KeychainItem::new),
			totalEclipseChain = createNewItem(Strings.totalEclipseChain, KeychainItem::new),
			treasureTroveChain = createNewItem(Strings.treasureTroveChain, KeychainItem::new),
			trueLightsFlightChain = createNewItem(Strings.trueLightsFlightChain, KeychainItem::new),
			twilightBlazeChain = createNewItem(Strings.twilightBlazeChain, KeychainItem::new),
			twoBecomeOneChain = createNewItem(Strings.twoBecomeOneChain, KeychainItem::new),
			ultimaWeaponBBSChain = createNewItem(Strings.ultimaWeaponBBSChain, KeychainItem::new),
			ultimaWeaponDDDChain = createNewItem(Strings.ultimaWeaponDDDChain, KeychainItem::new),
			ultimaWeaponKH1Chain = createNewItem(Strings.ultimaWeaponKH1Chain, KeychainItem::new),
			ultimaWeaponKH2Chain = createNewItem(Strings.ultimaWeaponKH2Chain, KeychainItem::new),
			ultimaWeaponKH3Chain = createNewItem(Strings.ultimaWeaponKH3Chain, KeychainItem::new),
			umbrellaChain = createNewItem(Strings.umbrellaChain, KeychainItem::new),
			unboundChain = createNewItem(Strings.unboundChain, KeychainItem::new),
			victoryLineChain = createNewItem(Strings.victoryLineChain, KeychainItem::new),
			voidGearChain = createNewItem(Strings.voidGearChain, KeychainItem::new),
			waytotheDawnChain = createNewItem(Strings.waytotheDawnChain, KeychainItem::new),
			waywardWindChain = createNewItem(Strings.waywardWindChain, KeychainItem::new),
			winnersProofChain = createNewItem(Strings.winnersProofChain, KeychainItem::new),
			wishingLampChain = createNewItem(Strings.wishingLampChain, KeychainItem::new),
			wishingStarChain = createNewItem(Strings.wishingStarChain, KeychainItem::new),
			youngXehanortsKeybladeChain = createNewItem(Strings.youngXehanortsKeybladeChain, KeychainItem::new),
			zeroOneChain = createNewItem(Strings.zeroOneChain, KeychainItem::new),

			organizationRobe_Helmet = createArmorItem(Strings.organizationHood, KKArmorMaterial.ORGANIZATION, EquipmentSlotType.HEAD),
			organizationRobe_Chestplate = createArmorItem(Strings.organizationChestplate, KKArmorMaterial.ORGANIZATION, EquipmentSlotType.CHEST),
			organizationRobe_Leggings = createArmorItem(Strings.organizationLeggings, KKArmorMaterial.ORGANIZATION, EquipmentSlotType.LEGS),
			organizationRobe_Boots = createArmorItem(Strings.organizationBoots, KKArmorMaterial.ORGANIZATION, EquipmentSlotType.FEET),

			terra_Helmet = createArmorItem(Strings.terraHelmet,KKArmorMaterial.TERRA, EquipmentSlotType.HEAD),
			terra_Chestplate = createArmorItem(Strings.terraChestplate, KKArmorMaterial.TERRA, EquipmentSlotType.CHEST),
			terra_Leggings = createArmorItem(Strings.terraLeggings, KKArmorMaterial.TERRA, EquipmentSlotType.LEGS),
			terra_Boots = createArmorItem(Strings.terraBoots, KKArmorMaterial.TERRA,EquipmentSlotType.FEET),

			ventus_Helmet = createArmorItem(Strings.ventusHelmet, KKArmorMaterial.VENTUS, EquipmentSlotType.HEAD),
			ventus_Chestplate = createArmorItem(Strings.ventusChestplate, KKArmorMaterial.VENTUS, EquipmentSlotType.CHEST),
			ventus_Leggings = createArmorItem(Strings.ventusLeggings, KKArmorMaterial.VENTUS, EquipmentSlotType.LEGS),
			ventus_Boots = createArmorItem(Strings.ventusBoots, KKArmorMaterial.VENTUS, EquipmentSlotType.FEET),

			aqua_Helmet = createArmorItem(Strings.aquaHelmet, KKArmorMaterial.AQUA, EquipmentSlotType.HEAD),
			aqua_Chestplate = createArmorItem(Strings.aquaChestplate, KKArmorMaterial.AQUA, EquipmentSlotType.CHEST),
			aqua_Leggings = createArmorItem(Strings.aquaLeggings, KKArmorMaterial.AQUA, EquipmentSlotType.LEGS),
			aqua_Boots = createArmorItem(Strings.aquaBoots, KKArmorMaterial.AQUA, EquipmentSlotType.FEET),

			eraqus_Helmet = createArmorItem(Strings.eraqusHelmet, KKArmorMaterial.ERAQUS, EquipmentSlotType.HEAD),
			eraqus_Chestplate = createArmorItem(Strings.eraqusChestplate, KKArmorMaterial.ERAQUS, EquipmentSlotType.CHEST),
			eraqus_Leggings = createArmorItem(Strings.eraqusLeggings, KKArmorMaterial.ERAQUS, EquipmentSlotType.LEGS),
			eraqus_Boots = createArmorItem(Strings.eraqusBoots, KKArmorMaterial.ERAQUS, EquipmentSlotType.FEET),

			vanitas_Helmet = createArmorItem(Strings.vanitasHelmet, KKArmorMaterial.VANITAS, EquipmentSlotType.HEAD),
			vanitas_Chestplate = createArmorItem(Strings.vanitasChestplate, KKArmorMaterial.VANITAS, EquipmentSlotType.CHEST),
			vanitas_Leggings = createArmorItem(Strings.vanitasLeggings, KKArmorMaterial.VANITAS, EquipmentSlotType.LEGS),
			vanitas_Boots = createArmorItem(Strings.vanitasBoots, KKArmorMaterial.VANITAS, EquipmentSlotType.FEET),

			nightmareVentus_Helmet = createArmorItem(Strings.nightmareVentusHelmet, KKArmorMaterial.NIGHTMAREVEN, EquipmentSlotType.HEAD),
			nightmareVentus_Chestplate = createArmorItem(Strings.nightmareVentusChestplate, KKArmorMaterial.NIGHTMAREVEN, EquipmentSlotType.CHEST),
			nightmareVentus_Leggings = createArmorItem(Strings.nightmareVentusLeggings, KKArmorMaterial.NIGHTMAREVEN, EquipmentSlotType.LEGS),
			nightmareVentus_Boots = createArmorItem(Strings.nightmareVentusBoots, KKArmorMaterial.NIGHTMAREVEN, EquipmentSlotType.FEET),

			antiCoat_Helmet = createArmorItem(Strings.antiCoatHelmet, KKArmorMaterial.ANTICOAT, EquipmentSlotType.HEAD),
			antiCoat_Chestplate = createArmorItem(Strings.antiCoatChestplate, KKArmorMaterial.ANTICOAT, EquipmentSlotType.CHEST),
			antiCoat_Leggings = createArmorItem(Strings.antiCoatLeggings, KKArmorMaterial.ANTICOAT, EquipmentSlotType.LEGS),
			antiCoat_Boots = createArmorItem(Strings.antiCoatBoots, KKArmorMaterial.ANTICOAT, EquipmentSlotType.FEET),

			xemnas_Helmet = createArmorItem(Strings.xemnasHelmet, KKArmorMaterial.XEMNAS, EquipmentSlotType.HEAD),
			xemnas_Chestplate = createArmorItem(Strings.xemnasChestplate, KKArmorMaterial.XEMNAS, EquipmentSlotType.CHEST),
			xemnas_Leggings = createArmorItem(Strings.xemnasLeggings, KKArmorMaterial.XEMNAS, EquipmentSlotType.LEGS),
			xemnas_Boots = createArmorItem(Strings.xemnasBoots, KKArmorMaterial.XEMNAS, EquipmentSlotType.FEET),

			heart = createNewItem(Strings.heart, new Item.Properties().group(KingdomKeys.miscGroup)),
			darkHeart = createNewItem(Strings.darkHeart, new Item.Properties().group(KingdomKeys.miscGroup)),
			pureHeart = createNewItem(Strings.pureHeart, new Item.Properties().group(KingdomKeys.miscGroup)),
			kingdomHearts = createNewItem(Strings.kingdom_hearts, new Item.Properties().group(KingdomKeys.miscGroup)),
			iceCream = createNewItem(Strings.iceCream, new Item.Properties().group(KingdomKeys.miscGroup).food(new Food.Builder().fastToEat().saturation(2.0f).hunger(2).build())),
			emptyBottle = createNewItem(Strings.emptyBottle, new Item.Properties().group(KingdomKeys.miscGroup)),

			disc_Birth_by_Sleep_A_Link_to_the_Future = createNewItem(Strings.Disc_Birth_by_Sleep_A_Link_to_the_Future, () -> new KKRecordItem(1, ModSounds.Record_Birth_by_Sleep_A_Link_to_the_Future, new Item.Properties().group(KingdomKeys.miscGroup), 7.29F)),
			disc_Darkness_of_the_Unknown = createNewItem(Strings.Disc_Darkness_of_the_Unknown, () -> new KKRecordItem(1, ModSounds.Record_Darkness_of_the_Unknown, new Item.Properties().group(KingdomKeys.miscGroup), 7.50F)),
			disc_Dearly_Beloved_Symphony_Version = createNewItem(Strings.Disc_Dearly_Beloved_Symphony_Version, () -> new KKRecordItem(1, ModSounds.Record_Dearly_Beloved_Symphony_Version, new Item.Properties().group(KingdomKeys.miscGroup), 2.33F)),
			disc_Dream_Drop_Distance_The_Next_Awakening = createNewItem(Strings.Disc_Dream_Drop_Distance_The_Next_Awakening, () -> new KKRecordItem(1, ModSounds.Record_Dream_Drop_Distance_The_Next_Awakening, new Item.Properties().group(KingdomKeys.miscGroup), 8.56F)),
			disc_Hikari_KINGDOM_Instrumental_Version = createNewItem(Strings.Disc_Hikari_KINGDOM_Instrumental_Version, () -> new KKRecordItem(1, ModSounds.Record_Hikari_KINGDOM_Instrumental_Version, new Item.Properties().group(KingdomKeys.miscGroup), 3.42F)),
			disc_L_Oscurita_Dell_Ignoto = createNewItem(Strings.Disc_L_Oscurita_Dell_Ignoto, () -> new KKRecordItem(1, ModSounds.Record_L_Oscurita_Dell_Ignoto, new Item.Properties().group(KingdomKeys.miscGroup), 4.33F)),
			disc_Musique_pour_la_tristesse_de_Xion = createNewItem(Strings.Disc_Musique_pour_la_tristesse_de_Xion, () -> new KKRecordItem(1, ModSounds.Record_Musique_pour_la_tristesse_de_Xion, new Item.Properties().group(KingdomKeys.miscGroup), 3.57F)),
			disc_No_More_Bugs_Bug_Version = createNewItem(Strings.Disc_No_More_Bugs_Bug_Version, () -> new KKRecordItem(1, ModSounds.Record_No_More_Bugs_Bug_Version, new Item.Properties().group(KingdomKeys.miscGroup), 3.17F)),
			disc_Organization_XIII = createNewItem(Strings.Disc_Organization_XIII, () -> new KKRecordItem(1, ModSounds.Record_Organization_XIII, new Item.Properties().group(KingdomKeys.miscGroup), 2.32F)),
			disc_Sanctuary = createNewItem(Strings.Disc_Sanctuary, () -> new KKRecordItem(1, ModSounds.Record_Sanctuary, new Item.Properties().group(KingdomKeys.miscGroup), 4.25F)),
			disc_Simple_And_Clean_PLANITb_Remix = createNewItem(Strings.Disc_Simple_And_Clean_PLANITb_Remix, () -> new KKRecordItem(1, ModSounds.Record_Simple_And_Clean_PLANITb_Remix, new Item.Properties().group(KingdomKeys.miscGroup), 2.37F)),
			disc_Sinister_Sundown = createNewItem(Strings.Disc_Sinister_Sundown, () -> new KKRecordItem(1, ModSounds.Record_Sinister_Sundown, new Item.Properties().group(KingdomKeys.miscGroup), 2.13F)),
			disc_The_13th_Anthology = createNewItem(Strings.Disc_The_13th_Anthology, () -> new KKRecordItem(1, ModSounds.Record_The_13th_Anthology, new Item.Properties().group(KingdomKeys.miscGroup), 6.38F)),

			blazingCrystal = createNewItem(Strings.SM_BlazingCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			blazingGem = createNewItem(Strings.SM_BlazingGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			blazingStone = createNewItem(Strings.SM_BlazingShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			blazingShard = createNewItem(Strings.SM_BlazingStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			brightCrystal = createNewItem(Strings.SM_BrightCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup),  Strings.SM_Rank_S)),
			brightGem = createNewItem(Strings.SM_BrightGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			brightStone = createNewItem(Strings.SM_BrightShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			brightShard = createNewItem(Strings.SM_BrightStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			darkCrystal = createNewItem(Strings.SM_DarkCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			darkGem = createNewItem(Strings.SM_DarkGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			darkStone = createNewItem(Strings.SM_DarkShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			darkShard = createNewItem(Strings.SM_DarkStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			denseCrystal = createNewItem(Strings.SM_DenseCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			denseGem = createNewItem(Strings.SM_DenseGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			denseStone = createNewItem(Strings.SM_DenseShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			denseShard = createNewItem(Strings.SM_DenseStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			energyCrystal = createNewItem(Strings.SM_EnergyCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			energyGem = createNewItem(Strings.SM_EnergyGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			energyStone = createNewItem(Strings.SM_EnergyShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			energyShard = createNewItem(Strings.SM_EnergyStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			frostCrystal = createNewItem(Strings.SM_FrostCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			frostGem = createNewItem(Strings.SM_FrostGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			frostStone = createNewItem(Strings.SM_FrostShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			frostShard = createNewItem(Strings.SM_FrostStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			lightningCrystal = createNewItem(Strings.SM_LightningCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			lightningGem = createNewItem(Strings.SM_LightningGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			lightningStone = createNewItem(Strings.SM_LightningShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			lightningShard = createNewItem(Strings.SM_LightningStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			lucidCrystal = createNewItem(Strings.SM_LucidCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			lucidGem = createNewItem(Strings.SM_LucidGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			lucidStone = createNewItem(Strings.SM_LucidShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			lucidShard = createNewItem(Strings.SM_LucidStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			serenityCrystal = createNewItem(Strings.SM_SerenityCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			serenityGem = createNewItem(Strings.SM_SerenityGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			serenityStone = createNewItem(Strings.SM_SerenityShard,() -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup),  Strings.SM_Rank_B)),
			serenityShard = createNewItem(Strings.SM_SerenityStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			twilightCrystal = createNewItem(Strings.SM_TwilightCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			twilightGem = createNewItem(Strings.SM_TwilightGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			twilightStone = createNewItem(Strings.SM_TwilightShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			twilightShard = createNewItem(Strings.SM_TwilightStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			mythrilCrystal = createNewItem(Strings.SM_MythrilCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			mythrilGem = createNewItem(Strings.SM_MythrilGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			mythrilStone = createNewItem(Strings.SM_MythrilShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			mythrilShard = createNewItem(Strings.SM_MythrilStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			tranquilCrystal = createNewItem(Strings.SM_TranquilCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			tranquilGem = createNewItem(Strings.SM_TranquilGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			tranquilStone = createNewItem(Strings.SM_TranquilShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			tranquilShard = createNewItem(Strings.SM_TranquilStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			stormyCrystal = createNewItem(Strings.SM_StormyCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			stormyGem = createNewItem(Strings.SM_StormyGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			stormyStone = createNewItem(Strings.SM_StormyShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			stormyShard = createNewItem(Strings.SM_StormyStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			remembranceCrystal = createNewItem(Strings.SM_RemembranceCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			remembranceGem = createNewItem(Strings.SM_RemembranceGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			remembranceStone = createNewItem(Strings.SM_RemembranceShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			remembranceShard = createNewItem(Strings.SM_RemembranceStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			powerCrystal = createNewItem(Strings.SM_PowerCrystal, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			powerGem = createNewItem(Strings.SM_PowerGem, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			powerStone = createNewItem(Strings.SM_PowerShard, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_B)),
			powerShard = createNewItem(Strings.SM_PowerStone, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_C)),
			orichalcumPlus = createNewItem(Strings.SM_OrichalcumPlus, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			orichalcum = createNewItem(Strings.SM_Orichalcum, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),
			manifestIllusion = createNewItem(Strings.SM_ManifestIllusion, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_S)),
			lostIllusion = createNewItem(Strings.SM_LostIllusion, () -> new SynthesisItem(new Item.Properties().group(KingdomKeys.miscGroup), Strings.SM_Rank_A)),

			masterOrb = createNewItem(Strings.LevelUpMaster, () -> new Item(new Item.Properties().group(KingdomKeys.miscGroup))),
			wisdomOrb = createNewItem(Strings.LevelUpWisdom, () -> new Item(new Item.Properties().group(KingdomKeys.miscGroup))),
			valorOrb = createNewItem(Strings.LevelUpValor, () -> new Item(new Item.Properties().group(KingdomKeys.miscGroup))),
			finalOrb = createNewItem(Strings.LevelUpFinal, () -> new Item(new Item.Properties().group(KingdomKeys.miscGroup))),
			limitOrb = createNewItem(Strings.LevelUpLimit, () -> new Item(new Item.Properties().group(KingdomKeys.miscGroup))),
			synthesisBag = createNewItem("synthesis_bag", () -> new ItemSynthesisBag(new Item.Properties().group(KingdomKeys.miscGroup)));


	//Helper method to create item with the properties and registry name
	public static RegistryObject<Item> createNewItem(String name, Item.Properties properties) {
		return ITEMS.register(name, () -> new Item(properties));
	}

	public static <T extends Item> RegistryObject<T> createNewItem(String name, Supplier<? extends T> item) {
		return ITEMS.register(name, item);
	}

	public static RegistryObject<Item> createKeybladeItem(String name) {
		return ITEMS.register(name, () -> new KeybladeItem(new Item.Properties().group(KingdomKeys.keybladesGroup).maxStackSize(1)));
	}


	private static RegistryObject<Item> createArmorItem(String name, KKArmorMaterial material, EquipmentSlotType slot) {
		return ITEMS.register(name, () -> new BaseArmorItem(material, slot));
	}
					/*
                    malice = new EtherealBladeItem(Strings.malice),
                    sanction = new EtherealBladeItem(Strings.sanction),
                    overlord = new EtherealBladeItem(Strings.overlord),
                    veneration = new EtherealBladeItem(Strings.veneration),
                    autocracy = new EtherealBladeItem(Strings.autocracy),
                    conquest = new EtherealBladeItem(Strings.conquest),
                    terminus = new EtherealBladeItem(Strings.terminus),
                    judgement = new EtherealBladeItem(Strings.judgement),
                    discipline = new EtherealBladeItem(Strings.discipline),
                    aristocracy = new EtherealBladeItem(Strings.aristocracy),
                    superiority = new EtherealBladeItem(Strings.superiority),
                    aggression = new EtherealBladeItem(Strings.aggression),
                    fury = new EtherealBladeItem(Strings.fury),
                    despair = new EtherealBladeItem(Strings.despair),
                    triumph = new EtherealBladeItem(Strings.triumph),
                    ruination = new EtherealBladeItem(Strings.ruination),
                    domination = new EtherealBladeItem(Strings.domination),
                    annihilation = new EtherealBladeItem(Strings.annihilation),
                    tyrant = new EtherealBladeItem(Strings.tyrant),
                    magnificence = new EtherealBladeItem(Strings.magnificence),
                    infinity = new EtherealBladeItem(Strings.infinity),
                    interdiction = new EtherealBladeItem(Strings.interdiction),
                    roundFan = new EtherealBladeItem(Strings.roundFan),
                    absolute = new EtherealBladeItem(Strings.absolute),
                    standalone = new ArrowgunsItem(Strings.standalone),
                    killerbee = new ArrowgunsItem(Strings.killerbee),
                    stingray = new ArrowgunsItem(Strings.stingray),
                    counterweight = new ArrowgunsItem(Strings.counterweight),
                    precision = new ArrowgunsItem(Strings.precision),
                    dualHead = new ArrowgunsItem(Strings.dualHead),
                    bahamut = new ArrowgunsItem(Strings.bahamut),
                    gullwing = new ArrowgunsItem(Strings.gullwing),
                    blueFrame = new ArrowgunsItem(Strings.blueFrame),
                    starShell = new ArrowgunsItem(Strings.starShell),
                    sunrise = new ArrowgunsItem(Strings.sunrise),
                    ignition = new ArrowgunsItem(Strings.ignition),
                    armstrong = new ArrowgunsItem(Strings.armstrong),
                    hardBoiledHeat = new ArrowgunsItem(Strings.hardBoiledHeat),
                    diabloEye = new ArrowgunsItem(Strings.diabloEye),
                    doubleTap = new ArrowgunsItem(Strings.doubleTap),
                    stardust = new ArrowgunsItem(Strings.stardust),
                    energyMuzzle = new ArrowgunsItem(Strings.energyMuzzle),
                    crimeAndPunishment = new ArrowgunsItem(Strings.crimeAndPunishment),
                    cupidsArrow = new ArrowgunsItem(Strings.cupidsArrow),
                    finalWeapon = new ArrowgunsItem(Strings.finalWeapon),
                    sharpshooter = new ArrowgunsItem(Strings.sharpshooter),
                    dryer = new ArrowgunsItem(Strings.dryer),
                    trumpet = new ArrowgunsItem(Strings.trumpet),
                    zephyr = new LanceItem(Strings.zephyr),
                    moonglade = new LanceItem(Strings.moonglade),
                    aer = new LanceItem(Strings.aer),
                    nescience = new LanceItem(Strings.nescience),
                    brume = new LanceItem(Strings.brume),
                    asura = new LanceItem(Strings.asura),
                    crux = new LanceItem(Strings.crux),
                    paladin = new LanceItem(Strings.paladin),
                    fellking = new LanceItem(Strings.fellking),
                    nightcloud = new LanceItem(Strings.nightcloud),
                    shimmer = new LanceItem(Strings.shimmer),
                    vortex = new LanceItem(Strings.vortex),
                    scission = new LanceItem(Strings.scission),
                    heavenfall = new LanceItem(Strings.heavenfall),
                    aether = new LanceItem(Strings.aether),
                    mazzaroth = new LanceItem(Strings.mazzaroth),
                    hegemon = new LanceItem(Strings.hegemon),
                    foxfire = new LanceItem(Strings.foxfire),
                    yaksha = new LanceItem(Strings.yaksha),
                    cynosura = new LanceItem(Strings.cynosura),
                    dragonreign = new LanceItem(Strings.dragonreign),
                    lindworm = new LanceItem(Strings.lindworm),
                    broom = new LanceItem(Strings.broom),
                    wyvern = new LanceItem(Strings.wyvern),
                    testerZero = new OrgShieldItem(Strings.testerZero),
                    productOne = new OrgShieldItem(Strings.productOne),
                    deepFreeze = new OrgShieldItem(Strings.deepFreeze),
                    cryoliteShield = new OrgShieldItem(Strings.cryoliteShield),
                    falseTheory = new OrgShieldItem(Strings.falseTheory),
                    glacier = new OrgShieldItem(Strings.glacier),
                    absoluteZero = new OrgShieldItem(Strings.absoluteZero),
                    gunz = new OrgShieldItem(Strings.gunz),
                    mindel = new OrgShieldItem(Strings.mindel),
                    snowslide = new OrgShieldItem(Strings.snowslide),
                    iceberg = new OrgShieldItem(Strings.iceberg),
                    inquisition = new OrgShieldItem(Strings.inquisition),
                    scrutiny = new OrgShieldItem(Strings.scrutiny),
                    empiricism = new OrgShieldItem(Strings.empiricism),
                    edification = new OrgShieldItem(Strings.edification),
                    contrivance = new OrgShieldItem(Strings.contrivance),
                    wurm = new OrgShieldItem(Strings.wurm),
                    subzero = new OrgShieldItem(Strings.subzero),
                    coldBlood = new OrgShieldItem(Strings.coldBlood),
                    diamondShield = new OrgShieldItem(Strings.diamondShield),
                    aegis = new OrgShieldItem(Strings.aegis),
                    frozenPride = new OrgShieldItem(Strings.frozenPride),
                    potLid = new OrgShieldItem(Strings.potLid),
                    snowman = new OrgShieldItem(Strings.snowman),
                    reticence = new AxeSwordItem(Strings.reticence),
                    goliath = new AxeSwordItem(Strings.goliath),
                    copperRed = new AxeSwordItem(Strings.copperRed),
                    daybreak = new AxeSwordItem(Strings.daybreak),
                    colossus = new AxeSwordItem(Strings.colossus),
                    ursaMajor = new AxeSwordItem(Strings.ursaMajor),
                    megacosm = new AxeSwordItem(Strings.megacosm),
                    terrene = new AxeSwordItem(Strings.terrene),
                    fuligin = new AxeSwordItem(Strings.fuligin),
                    hardWinter = new AxeSwordItem(Strings.hardWinter),
                    firefly = new AxeSwordItem(Strings.firefly),
                    harbinger = new AxeSwordItem(Strings.harbinger),
                    redwood = new AxeSwordItem(Strings.redwood),
                    sequoia = new AxeSwordItem(Strings.sequoia),
                    ironBlack = new AxeSwordItem(Strings.ironBlack),
                    earthshine = new AxeSwordItem(Strings.earthshine),
                    octiron = new AxeSwordItem(Strings.octiron),
                    hyperion = new AxeSwordItem(Strings.hyperion),
                    clarity = new AxeSwordItem(Strings.clarity),
                    oneThousandAndOneNights = new AxeSwordItem(Strings.oneThousandAndOneNights),
                    cardinalVirtue = new AxeSwordItem(Strings.cardinalVirtue),
                    skysplitter = new AxeSwordItem(Strings.skysplitter),
                    bleepBloopBop = new AxeSwordItem(Strings.bleepBloopBop),
                    monolith = new AxeSwordItem(Strings.monolith),
                    blackPrimer = new LexiconItem(Strings.blackPrimer),
                    whiteTome = new LexiconItem(Strings.whiteTome),
                    illicitResearch = new LexiconItem(Strings.illicitResearch),
                    buriedSecrets = new LexiconItem(Strings.buriedSecrets),
                    arcaneCompendium = new LexiconItem(Strings.arcaneCompendium),
                    dissentersNotes = new LexiconItem(Strings.dissentersNotes),
                    nefariousCodex = new LexiconItem(Strings.nefariousCodex),
                    mysticAlbum = new LexiconItem(Strings.mysticAlbum),
                    cursedManual = new LexiconItem(Strings.cursedManual),
                    tabooText = new LexiconItem(Strings.tabooText),
                    eldritchEsoterica = new LexiconItem(Strings.eldritchEsoterica),
                    freakishBestiary = new LexiconItem(Strings.freakishBestiary),
                    madmansVita = new LexiconItem(Strings.madmansVita),
                    untitledWritings = new LexiconItem(Strings.untitledWritings),
                    abandonedDogma = new LexiconItem(Strings.abandonedDogma),
                    atlasOfOmens = new LexiconItem(Strings.atlasOfOmens),
                    revoltingScrapbook = new LexiconItem(Strings.revoltingScrapbook),
                    lostHeterodoxy = new LexiconItem(Strings.lostHeterodoxy),
                    otherworldlyTales = new LexiconItem(Strings.otherworldlyTales),
                    indescribableLore = new LexiconItem(Strings.indescribableLore),
                    radicalTreatise = new LexiconItem(Strings.radicalTreatise),
                    bookOfRetribution = new LexiconItem(Strings.bookOfRetribution),
                    midnightSnack = new LexiconItem(Strings.midnightSnack),
                    dearDiary = new LexiconItem(Strings.dearDiary),
                    newMoon = new ClaymoreItem(Strings.newMoon),
                    werewolf = new ClaymoreItem(Strings.werewolf),
                    artemis = new ClaymoreItem(Strings.artemis),
                    luminary = new ClaymoreItem(Strings.luminary),
                    selene = new ClaymoreItem(Strings.selene),
                    moonrise = new ClaymoreItem(Strings.moonrise),
                    astrologia = new ClaymoreItem(Strings.astrologia),
                    crater = new ClaymoreItem(Strings.crater),
                    lunarPhase = new ClaymoreItem(Strings.lunarPhase),
                    crescent = new ClaymoreItem(Strings.crescent),
                    gibbous = new ClaymoreItem(Strings.gibbous),
                    berserker = new ClaymoreItem(Strings.berserker),
                    twilight = new ClaymoreItem(Strings.twilight),
                    queenOfTheNight = new ClaymoreItem(Strings.queenOfTheNight),
                    balsamicMoon = new ClaymoreItem(Strings.balsamicMoon),
                    orbit = new ClaymoreItem(Strings.orbit),
                    lightYear = new ClaymoreItem(Strings.lightYear),
                    kingOfTheNight = new ClaymoreItem(Strings.kingOfTheNight),
                    moonset = new ClaymoreItem(Strings.moonset),
                    horoscope = new ClaymoreItem(Strings.horoscope),
                    dichotomy = new ClaymoreItem(Strings.dichotomy),
                    lunatic = new ClaymoreItem(Strings.lunatic),
                    justDesserts = new ClaymoreItem(Strings.justDesserts),
                    bunnymoon = new ClaymoreItem(Strings.bunnymoon),
                    ashes = new ChakramItem(Strings.ashes),
                    doldrums = new ChakramItem(Strings.doldrums),
                    delayedAction = new ChakramItem(Strings.delayedAction),
                    diveBombers = new ChakramItem(Strings.diveBombers),
                    combustion = new ChakramItem(Strings.combustion),
                    moulinRouge = new ChakramItem(Strings.moulinRouge),
                    blazeOfGlory = new ChakramItem(Strings.blazeOfGlory),
                    prometheus = new ChakramItem(Strings.prometheus),
                    ifrit = new ChakramItem(Strings.ifrit),
                    magmaOcean = new ChakramItem(Strings.magmaOcean),
                    volcanics = new ChakramItem(Strings.volcanics),
                    inferno = new ChakramItem(Strings.inferno),
                    sizzlingEdge = new ChakramItem(Strings.sizzlingEdge),
                    corona = new ChakramItem(Strings.corona),
                    ferrisWheel = new ChakramItem(Strings.ferrisWheel),
                    burnout = new ChakramItem(Strings.burnout),
                    omegaTrinity = new ChakramItem(Strings.omegaTrinity),
                    outbreak = new ChakramItem(Strings.outbreak),
                    doubleEdge = new ChakramItem(Strings.doubleEdge),
                    wildfire = new ChakramItem(Strings.wildfire),
                    prominence = new ChakramItem(Strings.prominence),
                    eternalFlames = new ChakramItem(Strings.eternalFlames),
                    pizzaCut = new ChakramItem(Strings.pizzaCut),
                    conformers = new ChakramItem(Strings.conformers),
                    basicModel = new SitarItem(Strings.basicModel),
                    tuneUp = new SitarItem(Strings.tuneUp),
                    quartet = new SitarItem(Strings.quartet),
                    quintet = new SitarItem(Strings.quintet),
                    overture = new SitarItem(Strings.overture),
                    oldHand = new SitarItem(Strings.oldHand),
                    daCapo = new SitarItem(Strings.daCapo),
                    powerChord = new SitarItem(Strings.powerChord),
                    fermata = new SitarItem(Strings.fermata),
                    interlude = new SitarItem(Strings.interlude),
                    serenade = new SitarItem(Strings.serenade),
                    songbird = new SitarItem(Strings.songbird),
                    riseToFame = new SitarItem(Strings.riseToFame),
                    rockStar = new SitarItem(Strings.rockStar),
                    eightFinger = new SitarItem(Strings.eightFinger),
                    concerto = new SitarItem(Strings.concerto),
                    harmonics = new SitarItem(Strings.harmonics),
                    millionBucks = new SitarItem(Strings.millionBucks),
                    fortissimo = new SitarItem(Strings.fortissimo),
                    upToEleven = new SitarItem(Strings.upToEleven),
                    sanctuary = new SitarItem(Strings.sanctuary),
                    arpeggio = new SitarItem(Strings.arpeggio),
                    princeOfAwesome = new SitarItem(Strings.princeOfAwesome),
                    afterSchool = new SitarItem(Strings.afterSchool),
                    theFool = new CardItem(Strings.theFool),
                    theMagician = new CardItem(Strings.theMagician),
                    theStar = new CardItem(Strings.theStar),
                    theMoon = new CardItem(Strings.theMoon),
                    justice = new CardItem(Strings.justice),
                    theHierophant = new CardItem(Strings.theHierophant),
                    theWorld = new CardItem(Strings.theWorld),
                    temperance = new CardItem(Strings.temperance),
                    theHighPriestess = new CardItem(Strings.theHighPriestess),
                    theTower = new CardItem(Strings.theTower),
                    theHangedMan = new CardItem(Strings.theHangedMan),
                    death = new CardItem(Strings.death),
                    theHermit = new CardItem(Strings.theHermit),
                    strength = new CardItem(Strings.strength),
                    theLovers = new CardItem(Strings.theLovers),
                    theChariot = new CardItem(Strings.theChariot),
                    theSun = new CardItem(Strings.theSun),
                    theDevil = new CardItem(Strings.theDevil),
                    theEmpress = new CardItem(Strings.theEmpress),
                    theEmperor = new CardItem(Strings.theEmperor),
                    theJoker = new CardItem(Strings.theJoker),
                    fairGame = new CardItem(Strings.fairGame),
                    finestFantasy13 = new CardItem(Strings.finestFantasy13),
                    highRollersSecret = new CardItem(Strings.highRollersSecret),
                    fickleErica = new ScytheItem(Strings.fickleErica),
                    jiltedAnemone = new ScytheItem(Strings.jiltedAnemone),
                    proudAmaryllis = new ScytheItem(Strings.proudAmaryllis),
                    madSafflower = new ScytheItem(Strings.madSafflower),
                    poorMelissa = new ScytheItem(Strings.poorMelissa),
                    tragicAllium = new ScytheItem(Strings.tragicAllium),
                    mournfulCineria = new ScytheItem(Strings.mournfulCineria),
                    pseudoSilene = new ScytheItem(Strings.pseudoSilene),
                    faithlessDigitalis = new ScytheItem(Strings.faithlessDigitalis),
                    grimMuscari = new ScytheItem(Strings.grimMuscari),
                    docileVallota = new ScytheItem(Strings.docileVallota),
                    quietBelladonna = new ScytheItem(Strings.quietBelladonna),
                    partingIpheion = new ScytheItem(Strings.partingIpheion),
                    loftyGerbera = new ScytheItem(Strings.loftyGerbera),
                    gallantAchillea = new ScytheItem(Strings.gallantAchillea),
                    noblePeony = new ScytheItem(Strings.noblePeony),
                    fearsomeAnise = new ScytheItem(Strings.fearsomeAnise),
                    vindictiveThistle = new ScytheItem(Strings.vindictiveThistle),
                    fairHelianthus = new ScytheItem(Strings.fairHelianthus),
                    solemnMagnolia = new ScytheItem(Strings.solemnMagnolia),
                    hallowedLotus = new ScytheItem(Strings.hallowedLotus),
                    gracefulDahlia = new ScytheItem(Strings.gracefulDahlia),
                    stirringLadle = new ScytheItem(Strings.stirringLadle),
                    daintyBellflowers = new ScytheItem(Strings.daintyBellflowers),
                    trancheuse = new KnifeItem(Strings.trancheuse),
                    orage = new KnifeItem(Strings.orage),
                    tourbillon = new KnifeItem(Strings.tourbillon),
                    tempete = new KnifeItem(Strings.tempete),
                    carmin = new KnifeItem(Strings.carmin),
                    meteore = new KnifeItem(Strings.meteore),
                    etoile = new KnifeItem(Strings.etoile),
                    irregulier = new KnifeItem(Strings.irregulier),
                    dissonance = new KnifeItem(Strings.dissonance),
                    eruption = new KnifeItem(Strings.eruption),
                    soleilCouchant = new KnifeItem(Strings.soleilCouchant),
                    indigo = new KnifeItem(Strings.indigo),
                    vague = new KnifeItem(Strings.vague),
                    deluge = new KnifeItem(Strings.deluge),
                    rafale = new KnifeItem(Strings.rafale),
                    typhon = new KnifeItem(Strings.typhon),
                    extirpeur = new KnifeItem(Strings.extirpeur),
                    croixDuSud = new KnifeItem(Strings.croixDuSud),
                    lumineuse = new KnifeItem(Strings.lumineuse),
                    clairDeLune = new KnifeItem(Strings.clairDeLune),
                    volDeNuit = new KnifeItem(Strings.volDeNuit),
                    foudre = new KnifeItem(Strings.foudre),
                    demoiselle = new KnifeItem(Strings.demoiselle),
                    ampoule = new KnifeItem(Strings.ampoule)
                    */

					/*
        @SubscribeEvent
    	public static void registerContainers(RegistryEvent.Register<ContainerType<?>> evt) {
    		IForgeRegistry<ContainerType<?>> r = evt.getRegistry();

    		ContainerType<ContainerSynthesisBag> bag = IForgeContainerType.create(ContainerSynthesisBag::fromNetwork);
    		register(r, bag, synthesisBag.get().getRegistryName());

    		DistExecutor.runWhenOn(Dist.CLIENT, () -> () -> {
    			ScreenManager.registerFactory(bag, GuiSynthesisBag::new);
    		});
    	}
        

    	public static <V extends IForgeRegistryEntry<V>> void register(IForgeRegistry<V> reg, IForgeRegistryEntry<V> thing, ResourceLocation name) {
    		reg.register(thing.setRegistryName(name));
    	}

    	public static <V extends IForgeRegistryEntry<V>> void register(IForgeRegistry<V> reg, IForgeRegistryEntry<V> thing, String name) {
    		register(reg, thing, new ResourceLocation(KingdomKeys.MODID, name));
    	}
    	*/
}
