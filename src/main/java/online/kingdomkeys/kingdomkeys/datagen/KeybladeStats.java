package online.kingdomkeys.kingdomkeys.datagen;

import net.minecraft.data.DataGenerator;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.model.generators.ExistingFileHelper;
import net.minecraftforge.fml.common.registry.GameRegistry;
import online.kingdomkeys.kingdomkeys.KingdomKeys;
import online.kingdomkeys.kingdomkeys.lib.Strings;
import online.kingdomkeys.kingdomkeys.synthesis.keybladeforge.KeybladeLevel;
import online.kingdomkeys.kingdomkeys.synthesis.material.Material;
import org.apache.commons.lang3.tuple.Pair;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeybladeStats extends KeybladeProvider {
    public KeybladeStats(DataGenerator generator, ExistingFileHelper existingFileHelper) {
        super(generator, KingdomKeys.MODID, KEYBLADE_FOLDER, KeybladeBuilder::new, existingFileHelper);
    }

    @Override
    protected void registerKeyblades() {
    	uxKeyblades();
    	bbsKeyblades();
        kh1Keyblades();
        kh2Keyblades();
        kh358Keyblades();
        khReCodedKeyblade();
        dddKeyblades();
        kh3Keyblades();
    }

    public static class Recipe {
        private List<Map.Entry<String, Integer>> recipe = new ArrayList<>();

        public Recipe() { }

        public Recipe addMaterial(String mat, int quantity) {
            recipe.add(Pair.of(mat, quantity));
            return this;
        }

        public Map<Material, Integer> asMap() {
            Map<Material, Integer> matMap = new HashMap<>();
            recipe.forEach(p -> matMap.put(GameRegistry.findRegistry(Material.class).getValue(new ResourceLocation(KingdomKeys.MODID + ":" + Strings.SM_Prefix + p.getKey())), p.getValue()));
            return matMap;
        }
    }

    //TODO the rest of the keyblades

    public void kh1Keyblades() {
        getBuilder(Strings.kingdomKey).keychain(Strings.kingdomKeyChain).baseStats(4,3)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .desc("The key chain attached draws out the Keyblade's true form and power.");

        getBuilder(Strings.kingdomKeyD).keychain(Strings.kingdomKeyDChain).baseStats(4,3)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .desc("A Keyblade which mirrors the Kingdom Key from the Realm of Darkness.");

        getBuilder(Strings.keybladeOfPeoplesHearts).keychain(Strings.keybladeOfPeoplesHeartsChain).baseStats(5,2)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("A keyblade with the ability to unlock a person's heart, releasing the darkness within.");

        getBuilder(Strings.jungleKing).keychain(Strings.jungleKingChain).baseStats(5,1)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Has a long reach, but seldom deals critical blows.");

        getBuilder(Strings.oathkeeper).keychain(Strings.oathkeeperChain).baseStats(8,4)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Enhances magic and increases the duration of a Drive Form.");

        getBuilder(Strings.oblivion).keychain(Strings.oblivionChain).baseStats(10,-1)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Has great strength, and allows the Drive Gauge to restore quickly during MP Charge.");

        getBuilder(Strings.ultimaWeaponKH1).keychain(Strings.ultimaWeaponKH1Chain).baseStats(8,3)
                .abilities("Combo Boost", "Air Combo Boost", "Situation Boost")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_HungryStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_HungryStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_HungryGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 11).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_HungryGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 12).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 13).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_HungryCrystal, 1)).build())
                .desc("The ultimate Keyblade. Raises max MP by 2, and possesses maximum power and attributes.");

        getBuilder(Strings.wishingStar).keychain(Strings.wishingStarChain).baseStats(5,2)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Has a short reach, but always finishes up a combo attack with a powerful critical blow.");

        getBuilder(Strings.ladyLuck).keychain(Strings.ladyLuckChain).baseStats(6,6)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Raises max MP by 2, and significantly enhances magic and summon power. Also inflicts good physical damage.");

        getBuilder(Strings.olympia).keychain(Strings.olympiaChain).baseStats(9,0)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("A powerful weapon that is difficult to deflect. Capable of inflicting mighty critical blows.");

        getBuilder(Strings.threeWishes).keychain(Strings.threeWishesChain).baseStats(6,2)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("A powerful weapon that is difficult to deflect.");

        getBuilder(Strings.threeWishes).keychain(Strings.threeWishesChain).baseStats(6,2)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("A powerful weapon that is difficult to deflect.");

        getBuilder(Strings.fairyHarp).keychain(Strings.fairyHarpChain).baseStats(6,4)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Raises max MP by 1, and enhances magic and summon power. Sometimes deals powerful critical blows.");

        getBuilder(Strings.crabclaw).keychain(Strings.crabclawChain).baseStats(6,3)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Raises max MP by 1, and enhances magic and summon power. Also deals good physical damage.");

        getBuilder(Strings.divineRose).keychain(Strings.divineRoseChain).baseStats(11,0)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("A powerful weapon that is difficult to deflect. Capable of dealing a string of critical blows.");

        getBuilder(Strings.spellbinder).keychain(Strings.spellbinderChain).baseStats(4,8)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Raises max MP by 2, and significantly enhances magic and summon power.");

        getBuilder(Strings.metalChocobo).keychain(Strings.metalChocoboChain).baseStats(8,-2)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Possesses incredible power and reach, but reduces max MP by 1. Rarely deals critical blows.");

        getBuilder(Strings.diamondDust).keychain(Strings.diamondDustChain).baseStats(3,10)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Greatly enhances magic and summon power. Raises max MP by 3.");

        getBuilder(Strings.lionheart).keychain(Strings.lionheartChain).baseStats(9,2)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Raises max MP by 1, and enhances magic and summon power. Also deals great physical damage.");

        getBuilder(Strings.oneWingedAngel).keychain(Strings.oneWingedAngelChain).baseStats(7,-4)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Raises max MP by 1, and enhances magic and summon power. Also deals great physical damage.");

        getBuilder(Strings.pumpkinhead).keychain(Strings.pumpkinheadChain).baseStats(7,0)
                .abilities("Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 2).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 3).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_WrithingGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_WrithingStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 1)
                        .addMaterial(Strings.SM_WrithingCrystal, 1)).build())
                .desc("Has a long reach and the ability to deal a string of critical blows.");
    }

    public void kh2Keyblades() {

        getBuilder(Strings.ultimaWeaponKH2).keychain(Strings.ultimaWeaponKH2Chain).baseStats(8,3)
                .abilities("Combo Boost", "Air Combo Boost", "Situation Boost")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_HungryStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_HungryStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_HungryGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 11).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_HungryGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 12).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 13).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_HungryCrystal, 1)).build())
                .desc("The Keyblade above all others, holding all power and will increase MP restoration rate, once all MP has been consumed.");

        getBuilder(Strings.waytotheDawn).keychain(Strings.waytotheDawnChain).baseStats(7,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Deals various attacks.");

        getBuilder(Strings.destinysEmbrace).keychain(Strings.destinysEmbraceChain).baseStats(4,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that makes it easier to land critical hits.");

        getBuilder(Strings.starSeeker).keychain(Strings.starSeekerChain).baseStats(6,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Increases maximum combo by 1 when in midair.");

        getBuilder(Strings.hiddenDragon).keychain(Strings.hiddenDragonChain).baseStats(4,4)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Restores MP relative to the amount of damage taken.");

        getBuilder(Strings.rumblingRose).keychain(Strings.rumblingRoseChain).baseStats(10,0)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Has great strength, allowing finishing combo moves to be unleashed successively.");

        getBuilder(Strings.herosCrest).keychain(Strings.herosCrestChain).baseStats(8,0)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Increases the damage of the finishing move in the air relative to the number of hits in the combo.");

        getBuilder(Strings.monochrome).keychain(Strings.monochromeChain).baseStats(8,0)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Increases the effect of restoration items used on the field.");

        getBuilder(Strings.mysteriousAbyss).keychain(Strings.mysteriousAbyssChain).baseStats(6,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Enhances magic to increase damage dealt by blizzard-based attacks.");

        getBuilder(Strings.followtheWind).keychain(Strings.followtheWindChain).baseStats(6,2)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Draws in nearby orbs.");

        getBuilder(Strings.wishingLamp).keychain(Strings.wishingLampChain).baseStats(8,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Wishes come true by increasing the drop rate of munny, HP and MP orbs.");

        getBuilder(Strings.decisivePumpkin).keychain(Strings.decisivePumpkinChain).baseStats(12,2)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The greater number of combos landed, the more damage is dealt, leading to a strong finishing move!");

        getBuilder(Strings.circleOfLife).keychain(Strings.circleOfLifeChain).baseStats(8,2)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Has great strength, increasing MP restoration speed after MP is consumed.");

        getBuilder(Strings.sweetMemories).keychain(Strings.sweetMemoriesChain).baseStats(0,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Although it does not enhance attack strength, it increases the drop rate of items.");

        getBuilder(Strings.photonDebugger).keychain(Strings.photonDebuggerChain).baseStats(6,4)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Increases damage done by thunder-based attacks.");

        getBuilder(Strings.gullWing).keychain(Strings.gullWingChain).baseStats(4,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Greatly increases the amount of experience gained when defeating an enemy at a critical moment.");

        getBuilder(Strings.gullWing).keychain(Strings.gullWingChain).baseStats(4,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Greatly increases the amount of experience gained when defeating an enemy at a critical moment.");

        getBuilder(Strings.guardianSoul).keychain(Strings.guardianSoulChain).baseStats(10, 2)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Has great strength, increasing the amount of damage dealt from Reaction Commands.");

        getBuilder(Strings.sleepingLion).keychain(Strings.sleepingLionChain).baseStats(10, 6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Well-balanced with strength and magic, increasing maximum ground-based combos by 1.");

        getBuilder(Strings.fenrir).keychain(Strings.fenrirChain).baseStats(14,2)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Has great range and strength, but maximum ground and midair combos are decreased by 1.");

        getBuilder(Strings.bondOfFlame).keychain(Strings.bondOfFlameChain).baseStats(8,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Enhances magic to increase damage dealt by fire-based attacks.");

        getBuilder(Strings.twoBecomeOne).keychain(Strings.twoBecomeOneChain).baseStats(6,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon of great strength and magic that has a special effect.");

        getBuilder(Strings.fatalCrest).keychain(Strings.fatalCrestChain).baseStats(6,10)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Increases strength during MP Charge and allows unlimited chaining of combos.");

        getBuilder(Strings.winnersProof).keychain(Strings.winnersProofChain).baseStats(10,14)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Has high strength and hold's an excellent magic power. When the enemies are defeated, experience points are not gained.");
    }

    public void kh3Keyblades() {
        getBuilder(Strings.ultimaWeaponKH3).keychain(Strings.ultimaWeaponKH3Chain).baseStats(8,3)
                .abilities("Combo Boost", "Air Combo Boost", "Situation Boost")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_HungryStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_HungryStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_HungryGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 11).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_HungryGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 12).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 13).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_HungryCrystal, 1)).build())
                .desc("The supreme Keyblade.");

        getBuilder(Strings.shootingStar).keychain(Strings.shootingStarChain).baseStats(3,5)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade with an emphasis on Magic.");


    }

    public void bbsKeyblades() {

        getBuilder(Strings.ultimaWeaponBBS).keychain(Strings.ultimaWeaponBBSChain).baseStats(8,3)
                .abilities("Combo Boost", "Air Combo Boost", "Situation Boost")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_HungryStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_HungryStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_HungryGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 11).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_HungryGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 12).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 13).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_HungryCrystal, 1)).build())
                .desc("The most powerful of Keyblades.");

        getBuilder(Strings.gulasKeyblade).keychain(Strings.gulasKeybladeChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade owned by Leopardos' Foreteller.");
    }

    public void dddKeyblades() {

        getBuilder(Strings.ultimaWeaponDDD).keychain(Strings.ultimaWeaponDDDChain).baseStats(8,3)
                .abilities("Combo Boost", "Air Combo Boost", "Situation Boost")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(9, 5).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(10, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 2)
                        .addMaterial(Strings.SM_HungryStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 3)
                        .addMaterial(Strings.SM_HungryStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(11, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 2)
                        .addMaterial(Strings.SM_HungryGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(12, 11).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 3)
                        .addMaterial(Strings.SM_HungryGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 12).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringCrystal, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(13, 13).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_HungryCrystal, 1)).build())
                .desc("An outstanding Keyblade that boosts all stats, and makes it easy to both land critical hits and trigger Reality Shifts.");

        getBuilder(Strings.skullNoise).keychain(Strings.skullNoiseChain).baseStats(4,4)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that provides a balanced boost in Strength and Magic.");

        getBuilder(Strings.guardianBell).keychain(Strings.guardianBellChain).baseStats(4,5)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade with long reach that provides an extra boost in Magic.");

        getBuilder(Strings.dualDisc).keychain(Strings.dualDiscChain).baseStats(5,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that provides an extra boost in Strength and makes it easier to land critical hits.");

        getBuilder(Strings.ferrisGear).keychain(Strings.ferrisGearChain).baseStats(5,4)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that provides an extra boost in Strength and makes it easier to land critical hits.");

        getBuilder(Strings.oceansRage).keychain(Strings.oceansRageChain).baseStats(6,5)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that lands fewer critical hits, but compensates with a boost in Magic and more frequent Reality Shifts.");

        getBuilder(Strings.knockoutPunch).keychain(Strings.knockoutPunchChain).baseStats(8,5)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that lands fewer critical hits, but compensates with a Strength boost and more frequent Reality Shifts.");

        getBuilder(Strings.allForOne).keychain(Strings.allForOneChain).baseStats(6,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade that triggers fewer Reality Shifts, but compensates with a boost in Magic and more frequent critical hits.");

        getBuilder(Strings.counterpoint).keychain(Strings.counterpointChain).baseStats(8,7)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade with long reach that provides an extra boost in Magic and makes it easier to trigger Reality Shifts." );

        getBuilder(Strings.divewing).keychain(Strings.divewingChain).baseStats(8,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade with long reach that provides an extra boost in Magic and makes it easier to trigger Reality Shifts." );

        getBuilder(Strings.endOfPain).keychain(Strings.endOfPainChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade with high magical power and critical hit rate, but reduces the occurrence of Reality Shift.");

        getBuilder(Strings.sweetDreams).keychain(Strings.sweetDreamsChain).baseStats(9,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade with long reach that provides an extra boost in Strength and makes it easier to land critical hits.");

        getBuilder(Strings.unbound).keychain(Strings.unboundChain).baseStats(14,7)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Keyblade perfection. It boosts all stats, while making it easy to land critical hits and even easier to trigger Reality Shifts.");

        getBuilder(Strings.youngXehanortsKeyblade).keychain(Strings.youngXehanortsKeybladeChain).baseStats(13,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade weilded by Young Xehanort.");

        getBuilder(Strings.flameLiberator).keychain(Strings.flameLiberatorChain).baseStats(8,6)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade wielded by Lea.");

        getBuilder(Strings.mirageSplit).keychain(Strings.mirageSplitChain).baseStats(8,5)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade formed from a Reality Shift in The World That Never Was.");

        getBuilder(Strings.nightmaresEnd).keychain(Strings.nightmaresEndChain).baseStats(9,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade formed from a Reality Shift in The World That Never Was.");

        getBuilder(Strings.nightmaresEndAndMirageSplit).keychain(Strings.nightmaresEndAndMirageSplitChain).baseStats(20,9)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade formed by combining both the Mirage Split and Nightmare's End.");
    }

    public void uxKeyblades() {
        getBuilder(Strings.gulasKeyblade).keychain(Strings.gulasKeybladeChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade owned by Leopardos' Foreteller.");

        getBuilder(Strings.avasKeyblade).keychain(Strings.avasKeybladeChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade owned by Vulpeus' Foreteller.");

        getBuilder(Strings.irasKeyblade).keychain(Strings.irasKeybladeChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade owned by Unicornis' Foreteller.");

        getBuilder(Strings.invisKeyblade).keychain(Strings.invisKeybladeChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade owned by Anguis' Foreteller.");

        getBuilder(Strings.acedsKeyblade).keychain(Strings.acedsKeybladeChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("The Keyblade owned by Ursus' Foreteller.");

        getBuilder(Strings.starlight).keychain(Strings.starlightChain).baseStats(6,3)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A basic Keyblade which is associated with the force of Light.");

        getBuilder(Strings.moogleOGlory).keychain(Strings.moogleOGloryChain).baseStats(10,8)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("Kupo.");
    }

    public void kh358Keyblades() {

        getBuilder(Strings.missingAche).keychain(Strings.missingAcheChain).baseStats(3,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that lets you string together faster, longer ground combos.");

        getBuilder(Strings.ominousBlight).keychain(Strings.ominousBlightChain).baseStats(4,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that lets you string together faster, much longer ground combos.");

        getBuilder(Strings.abaddonPlasma).keychain(Strings.abaddonPlasmaChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that lets you string together faster, incredibly long ground combos.");

        getBuilder(Strings.painOfSolitude).keychain(Strings.painOfSolitudeChain).baseStats(3,1 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that boosts your Magic to give it more power.");

        getBuilder(Strings.painOfSolitude).keychain(Strings.painOfSolitudeChain).baseStats(3,1 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that boosts your Magic to give it more power.");

        getBuilder(Strings.signOfInnocence).keychain(Strings.signOfInnocenceChain).baseStats(5,1 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that boosts your Magic to give it a lot more power.");

        getBuilder(Strings.crownOfGuilt).keychain(Strings.crownOfGuiltChain).baseStats(5,8 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that boosts your Magic to give it incredible power.");

        getBuilder(Strings.abyssalTide).keychain(Strings.abyssalTideChain).baseStats(4,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that performs very well in midair. Excellent for taking on fliers.");

        getBuilder(Strings.leviathan).keychain(Strings.leviathanChain).baseStats(4,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that performs extremely well in midair. Outstanding for taking on fliers.");

        getBuilder(Strings.trueLightsFlight).keychain(Strings.trueLightsFlightChain).baseStats(5,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that enables your attacks to reach a wide area and deal heavy damage.");

        getBuilder(Strings.rejectionOfFate).keychain(Strings.rejectionOfFateChain).baseStats(4,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that enables your attacks to reach a wide area and deal immense damage.");

        getBuilder(Strings.midnightRoar).keychain(Strings.midnightRoarChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that possesses high Strength. Useful against tough enemies.");

        getBuilder(Strings.glimpseOfDarkness).keychain(Strings.glimpseOfDarknessChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that possesses very high Strength. Effective against tough enemies.");

        getBuilder(Strings.totalEclipse).keychain(Strings.totalEclipse).baseStats(5,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that possesses extreme Strength. Devastates tough enemies.");

        getBuilder(Strings.silentDirge).keychain(Strings.silentDirgeChain).baseStats(5,2 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that provides versatility by boosting both Strength and Magic. ");

        getBuilder(Strings.lunarEclipse).keychain(Strings.lunarEclipseChain).baseStats(7,8 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that boosts versatility by greatly boosting both Strength and Magic.");

        getBuilder(Strings.darkerThanDark).keychain(Strings.darkerThanDarkChain).baseStats(6,9 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that offers high Magic and combo reach.");

        getBuilder(Strings.astralBlast).keychain(Strings.astralBlastChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that lets you string together longer ground and aerial combos.");

        getBuilder(Strings.maverickFlare).keychain(Strings.maverickFlareChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that offers high Strength and ground combo speed.");

        getBuilder(Strings.twilightBlaze).keychain(Strings.twilightBlazeChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that boasts superior Strength and ground combo speed.");

        getBuilder(Strings.omegaWeapon).keychain(Strings.omegaWeaponChain).baseStats(7,3 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A formidable weapon with exceptional capabilities.");

        getBuilder(Strings.aubade).keychain(Strings.aubadeChain).baseStats(6,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A weapon that draws forth its wielder's personality.");

        getBuilder(Strings.umbrella).keychain(Strings.umbrellaChain).baseStats(2,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("This looks awfully familiar...");

        getBuilder(Strings.soulEater).keychain(Strings.soulEaterChain).baseStats(8,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A sword that swims with darkness. Possesses high Strength.");

        getBuilder(Strings.woodenStick).keychain(Strings.woodenStickChain).baseStats(0,0 )
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A stick.");
    }
    
    public void khReCodedKeyblade() {
        getBuilder(Strings.zeroOne).keychain(Strings.zeroOneChain).baseStats(10,4)
                .abilities("Magic Treasure Magnet", "Formchange Extender")
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 4).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(3, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 3)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 6).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Fluorite, 1).addMaterial(Strings.SM_WellspringShard, 4)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(4, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 7).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(5, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringStone, 1)
                        .addMaterial(Strings.SM_LightningStone, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 8).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(6, 9).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Adamantite, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 1)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(7, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Damascus, 1).addMaterial(Strings.SM_WellspringGem, 1)
                        .addMaterial(Strings.SM_LightningGem, 2)).build())
                .level( new KeybladeLevel.KeybladeLevelBuilder().withStats(8, 10).withMaterials(new Recipe()
                        .addMaterial(Strings.SM_Electrum, 1).addMaterial(Strings.SM_WellspringCrystal, 2)
                        .addMaterial(Strings.SM_LightningCrystal, 1)).build())
                .desc("A Keyblade newly wrought within the datascape. Its powers render all opponents helpless.");
    }

    @Override
    public String getName() {
        return "Keyblade json";
    }
}
